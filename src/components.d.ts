/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface AcmeHamburger {
    }
    interface AcmeNavbar {
        "contacts": string;
        "phone": string;
        "products": string;
        "services": string;
        "tagline": string;
        "who": string;
    }
    interface HamburgerBody {
        "contacts": string;
        "products": string;
        "services": string;
        "who": string;
    }
    interface LowerBar {
        "contacts": string;
        "products": string;
        "services": string;
        "who": string;
    }
    interface UpperBar {
        "phone": string;
        "tagline": string;
    }
}
declare global {
    interface HTMLAcmeHamburgerElement extends Components.AcmeHamburger, HTMLStencilElement {
    }
    var HTMLAcmeHamburgerElement: {
        prototype: HTMLAcmeHamburgerElement;
        new (): HTMLAcmeHamburgerElement;
    };
    interface HTMLAcmeNavbarElement extends Components.AcmeNavbar, HTMLStencilElement {
    }
    var HTMLAcmeNavbarElement: {
        prototype: HTMLAcmeNavbarElement;
        new (): HTMLAcmeNavbarElement;
    };
    interface HTMLHamburgerBodyElement extends Components.HamburgerBody, HTMLStencilElement {
    }
    var HTMLHamburgerBodyElement: {
        prototype: HTMLHamburgerBodyElement;
        new (): HTMLHamburgerBodyElement;
    };
    interface HTMLLowerBarElement extends Components.LowerBar, HTMLStencilElement {
    }
    var HTMLLowerBarElement: {
        prototype: HTMLLowerBarElement;
        new (): HTMLLowerBarElement;
    };
    interface HTMLUpperBarElement extends Components.UpperBar, HTMLStencilElement {
    }
    var HTMLUpperBarElement: {
        prototype: HTMLUpperBarElement;
        new (): HTMLUpperBarElement;
    };
    interface HTMLElementTagNameMap {
        "acme-hamburger": HTMLAcmeHamburgerElement;
        "acme-navbar": HTMLAcmeNavbarElement;
        "hamburger-body": HTMLHamburgerBodyElement;
        "lower-bar": HTMLLowerBarElement;
        "upper-bar": HTMLUpperBarElement;
    }
}
declare namespace LocalJSX {
    interface AcmeHamburger {
    }
    interface AcmeNavbar {
        "contacts"?: string;
        "phone"?: string;
        "products"?: string;
        "services"?: string;
        "tagline"?: string;
        "who"?: string;
    }
    interface HamburgerBody {
        "contacts"?: string;
        "products"?: string;
        "services"?: string;
        "who"?: string;
    }
    interface LowerBar {
        "contacts"?: string;
        "products"?: string;
        "services"?: string;
        "who"?: string;
    }
    interface UpperBar {
        "phone"?: string;
        "tagline"?: string;
    }
    interface IntrinsicElements {
        "acme-hamburger": AcmeHamburger;
        "acme-navbar": AcmeNavbar;
        "hamburger-body": HamburgerBody;
        "lower-bar": LowerBar;
        "upper-bar": UpperBar;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "acme-hamburger": LocalJSX.AcmeHamburger & JSXBase.HTMLAttributes<HTMLAcmeHamburgerElement>;
            "acme-navbar": LocalJSX.AcmeNavbar & JSXBase.HTMLAttributes<HTMLAcmeNavbarElement>;
            "hamburger-body": LocalJSX.HamburgerBody & JSXBase.HTMLAttributes<HTMLHamburgerBodyElement>;
            "lower-bar": LocalJSX.LowerBar & JSXBase.HTMLAttributes<HTMLLowerBarElement>;
            "upper-bar": LocalJSX.UpperBar & JSXBase.HTMLAttributes<HTMLUpperBarElement>;
        }
    }
}
prototype: HTMLBgFormElement;
        new (): HTMLBgFormElement;
    };
    interface HTMLBodyBoxElement extends Components.BodyBox, HTMLStencilElement {
    }
    var HTMLBodyBoxElement: {
        prototype: HTMLBodyBoxElement;
        new (): HTMLBodyBoxElement;
    };
    interface HTMLBodyBox2Element extends Components.BodyBox2, HTMLStencilElement {
    }
    var HTMLBodyBox2Element: {
        prototype: HTMLBodyBox2Element;
        new (): HTMLBodyBox2Element;
    };
    interface HTMLBodyContainerElement extends Components.BodyContainer, HTMLStencilElement {
    }
    var HTMLBodyContainerElement: {
        prototype: HTMLBodyContainerElement;
        new (): HTMLBodyContainerElement;
    };
    interface HTMLFaqAccordionElement extends Components.FaqAccordion, HTMLStencilElement {
    }
    var HTMLFaqAccordionElement: {
        prototype: HTMLFaqAccordionElement;
        new (): HTMLFaqAccordionElement;
    };
    interface HTMLFaqTextElement extends Components.FaqText, HTMLStencilElement {
    }
    var HTMLFaqTextElement: {
        prototype: HTMLFaqTextElement;
        new (): HTMLFaqTextElement;
    };
    interface HTMLFaqWrapElement extends Components.FaqWrap, HTMLStencilElement {
    }
    var HTMLFaqWrapElement: {
        prototype: HTMLFaqWrapElement;
        new (): HTMLFaqWrapElement;
    };
    interface HTMLFaqWrapAccordionElement extends Components.FaqWrapAccordion, HTMLStencilElement {
    }
    var HTMLFaqWrapAccordionElement: {
        prototype: HTMLFaqWrapAccordionElement;
        new (): HTMLFaqWrapAccordionElement;
    };
    interface HTMLHamburgerBodyElement extends Components.HamburgerBody, HTMLStencilElement {
    }
    var HTMLHamburgerBodyElement: {
        prototype: HTMLHamburgerBodyElement;
        new (): HTMLHamburgerBodyElement;
    };
    interface HTMLLowerBarElement extends Components.LowerBar, HTMLStencilElement {
    }
    var HTMLLowerBarElement: {
        prototype: HTMLLowerBarElement;
        new (): HTMLLowerBarElement;
    };
    interface HTMLUpperBarElement extends Components.UpperBar, HTMLStencilElement {
    }
    var HTMLUpperBarElement: {
        prototype: HTMLUpperBarElement;
        new (): HTMLUpperBarElement;
    };
    interface HTMLElementTagNameMap {
        "acme-banner": HTMLAcmeBannerElement;
        "acme-footer": HTMLAcmeFooterElement;
        "acme-form": HTMLAcmeFormElement;
        "acme-hamburger": HTMLAcmeHamburgerElement;
        "acme-navbar": HTMLAcmeNavbarElement;
        "acme-news": HTMLAcmeNewsElement;
        "app-container": HTMLAppContainerElement;
        "bg-form": HTMLBgFormElement;
        "body-box": HTMLBodyBoxElement;
        "body-box2": HTMLBodyBox2Element;
        "body-container": HTMLBodyContainerElement;
        "faq-accordion": HTMLFaqAccordionElement;
        "faq-text": HTMLFaqTextElement;
        "faq-wrap": HTMLFaqWrapElement;
        "faq-wrap-accordion": HTMLFaqWrapAccordionElement;
        "hamburger-body": HTMLHamburgerBodyElement;
        "lower-bar": HTMLLowerBarElement;
        "upper-bar": HTMLUpperBarElement;
    }
}
declare namespace LocalJSX {
    interface AcmeBanner {
        "contacts"?: string;
        "phone"?: string;
        "products"?: string;
        "services"?: string;
        "tagline"?: string;
        "who"?: string;
    }
    interface AcmeFooter {
        /**
          * value of first h5 in the footer
         */
        "headFiveOne"?: string;
        /**
          * value of the last h5 in the footer
         */
        "headFiveThree"?: string;
        /**
          * value of the second h5 in the footer
         */
        "headFiveTwo"?: string;
    }
    interface AcmeForm {
    }
    interface AcmeHamburger {
    }
    interface AcmeNavbar {
        "contacts"?: string;
        "phone"?: string;
        "products"?: string;
        "services"?: string;
        "tagline"?: string;
        "who"?: string;
    }
    interface AcmeNews {
    }
    interface AppContainer {
    }
    interface BgForm {
    }
    interface BodyBox {
    }
    interface BodyBox2 {
    }
    interface BodyContainer {
    }
    interface FaqAccordion {
        /**
          * pass the content of faq answer from faq-wrap-acoordion
         */
        "answer"?: string;
        /**
          * event of toggle accordion
         */
        "onMyToggle"?: (event: CustomEvent<any>) => void;
        /**
          * pass the content of faq question from faq-wrap-acoordion
         */
        "question"?: string;
        /**
          * pass the width of faq-accordion
         */
        "width"?: string;
    }
    interface FaqText {
    }
    interface FaqWrap {
    }
    interface FaqWrapAccordion {
    }
    interface HamburgerBody {
        "contacts"?: string;
        "products"?: string;
        "services"?: string;
        "who"?: string;
    }
    interface LowerBar {
        "contacts"?: string;
        "products"?: string;
        "services"?: string;
        "who"?: string;
    }
    interface UpperBar {
        "phone"?: string;
        "tagline"?: string;
    }
    interface IntrinsicElements {
        "acme-banner": AcmeBanner;
        "acme-footer": AcmeFooter;
        "acme-form": AcmeForm;
        "acme-hamburger": AcmeHamburger;
        "acme-navbar": AcmeNavbar;
        "acme-news": AcmeNews;
        "app-container": AppContainer;
        "bg-form": BgForm;
        "body-box": BodyBox;
        "body-box2": BodyBox2;
        "body-container": BodyContainer;
        "faq-accordion": FaqAccordion;
        "faq-text": FaqText;
        "faq-wrap": FaqWrap;
        "faq-wrap-accordion": FaqWrapAccordion;
        "hamburger-body": HamburgerBody;
        "lower-bar": LowerBar;
        "upper-bar": UpperBar;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "acme-banner": LocalJSX.AcmeBanner & JSXBase.HTMLAttributes<HTMLAcmeBannerElement>;
            "acme-footer": LocalJSX.AcmeFooter & JSXBase.HTMLAttributes<HTMLAcmeFooterElement>;
            "acme-form": LocalJSX.AcmeForm & JSXBase.HTMLAttributes<HTMLAcmeFormElement>;
            "acme-hamburger": LocalJSX.AcmeHamburger & JSXBase.HTMLAttributes<HTMLAcmeHamburgerElement>;
            "acme-navbar": LocalJSX.AcmeNavbar & JSXBase.HTMLAttributes<HTMLAcmeNavbarElement>;
            "acme-news": LocalJSX.AcmeNews & JSXBase.HTMLAttributes<HTMLAcmeNewsElement>;
            "app-container": LocalJSX.AppContainer & JSXBase.HTMLAttributes<HTMLAppContainerElement>;
            "bg-form": LocalJSX.BgForm & JSXBase.HTMLAttributes<HTMLBgFormElement>;
            "body-box": LocalJSX.BodyBox & JSXBase.HTMLAttributes<HTMLBodyBoxElement>;
            "body-box2": LocalJSX.BodyBox2 & JSXBase.HTMLAttributes<HTMLBodyBox2Element>;
            "body-container": LocalJSX.BodyContainer & JSXBase.HTMLAttributes<HTMLBodyContainerElement>;
            "faq-accordion": LocalJSX.FaqAccordion & JSXBase.HTMLAttributes<HTMLFaqAccordionElement>;
            "faq-text": LocalJSX.FaqText & JSXBase.HTMLAttributes<HTMLFaqTextElement>;
            "faq-wrap": LocalJSX.FaqWrap & JSXBase.HTMLAttributes<HTMLFaqWrapElement>;
            "faq-wrap-accordion": LocalJSX.FaqWrapAccordion & JSXBase.HTMLAttributes<HTMLFaqWrapAccordionElement>;
            "hamburger-body": LocalJSX.HamburgerBody & JSXBase.HTMLAttributes<HTMLHamburgerBodyElement>;
            "lower-bar": LocalJSX.LowerBar & JSXBase.HTMLAttributes<HTMLLowerBarElement>;
            "upper-bar": LocalJSX.UpperBar & JSXBase.HTMLAttributes<HTMLUpperBarElement>;
        }
    }
}
